Final exam: Thursday, May 9 2:00-3:50 pm
    --> posted repo of practice problems
    --> will review on Thursday, May 2


HW 11 (last assignment) due tonight
    - need JDK
    - *can* get IntelliJML
    - different libraries JUnit
    - don't worry about warnings that asserts are always true


Fan behavior:
    - has speed (0-5), isOn (T/F), rotateOn (T/F)
    - can only change speed one level at a time
    - fan can only rotate at speed 3 or higher
    - changing speed CAN turn the fan on/off
    - changing the speed CANNOT turn rotate off


    Fan on, speed 3, rotate on. Can we call setSpeed(2)?
        NO!


    Fan off, speed 0, rotate off. Can we call setSpeed(1)?
        YES! (and should turn fan to on)


    Fan on, speed 2, rotate off. Can we call setSpeed(0)?
        NO! (can't change speed by more than 1)


    Fan on, speed 3, rotate on. Can we call setSpeed(4)?
        (YES! and rotate stays on)


    Fan on, speed 3, rotate on. Can we call makeRotate()?
        NO! (because the fan is already rotating)

    Fan on ,speed 5, rotate off. Can we call setSpeed(5)?
        NO! speed needs to change

    Fan on ,speed 5, rotate off. Can we call setSpeed(6)?
        NO! 6 is not a valid speed.


What considerations when setting the speed?
    preconditions: don't allow skipping a speed
        speed parameter must be between 0-5
        speed parameter of 2 should mean that it's not rotating




Remaining graded categories for the semester:
- HW 11
- final exam
- "midterm equivalent from final"

///////////////////////////////////////

Today:

- Finish Account class
- Best practices for specifications outside this class
- Termination
- The Halting problem


///////////////////////////////////////

If a class has global invariants

- those invariants should hold when an object is created

    (do they in Account?)


- it is an unlisted precondition of each method that the global
    invariants hold


- it is an unlisted postcondition of each method that the global
    invariants STILL hold




--> write a globalsAssert method for Account
    - where should we call it?

    at the beginning of a method
    at the end of a method


///////////////////////////////////////

Account class - what to add to...

- make sure our global invariants are handled correctly?
- enforce our preconditions?
- check our postconditions?





//////////////////////////////////////

Best practices outside class


    E.g., what if we had a Clock class?

    minutes
    hours
    seconds
    AM/PM

    minutes/seconds - 0-59
    hours: 1-12



    tick() - go to next second



Highly recommend:
- write global invariants
    - considerations for method parameters?
        require parameters be so that they don't violate global
        invariants

    - considerations for method code?
        guides the code so global invariants aren't violated



- write preconditions and postconditions for all methods
    - throw exceptions if your preconditions aren't met



Next level:
- add asserts that global invariants still true at method end

- add asserts for postconditions


--> be careful with documentation


//////////////////////////////////////

Content of CIS 575.


To prove correctness of a function:

   - function contract (preconditions and postconditions)
   - loop invariant for any loops
        - describe progress loop has made so far
        - bound the loop counter
        - describe measure of work (for termination)


The process of proving correctness of a non-Logika algorithm
or function is EXACTLY the same approach we used in Logika.


--> What approach is that?

    prove loop invariants hold before loop begins

    prove loop invariants still hold at the end of each iteration

    use the invariants and !(loop condition) to
        prove the postconditions


/////////////////////////////////////

Termination - whether a program will finish on all inputs


Partial Correctness:
    if the precondition is satisfied
    we guarantee the postcondition if the program terminates


Total Correctness:
    if the precondition is satisfied
    we guarantee the postcondition AND termination


We need to show termination to achieve total correctness


////////////////////////////////////////

Termination with a loop.
    - create measure of how much work is left
        (i.e., how many iterations are left)

    - show that the measure DECREASES with each iteration
    - show that if there is no more work to do, then the loop
        has finished

    - see example


Termination with recursion.
    - use induction
    ...what does this mean about our preconditions?
    - see example



Collatz function.



////////////////////////////////////////

Decidability - whether a problem can be decided one way or another

Halting problem - given a computer program and a set of inputs
    can you write another program to determine if the original
    program will halt for the inputs?


Suppose, for the sake of contradiction, that I CAN write
a program that can determine if another program terminates.

Assume we have this function:

    def Halt(Function, Input):
        if (Function(Input) halts): return true
        else return false

We write:

    def DoOpposite(Function):
        if (Halt(Function, Function)) loop forever
        else exit

Consider DoOpposite(DoOpposite):
    Case 1: loops forever. Means Halt(DoOpposite, DoOpposite)
        return true. Thus DoOpposite(DoOpposite) halts.

    Case 2: exits.  Means Halt(DoOpposite, DoOpposite) returns
        false. Thus DoOpposite(DoOpposite) loops forever.

 Both cases led to a contradiction.
   So we can't write a Halt function.



//////////////////////////////////

OpenJML

- can verify total correctness if you:
    - provide function contracts
    - for loops, provide loop invariants and termination measure

--> see online tutorial/documentation


https://www.openjml.org/tutorial/

/////////////////////////////////////


Next time:

- review for final exam
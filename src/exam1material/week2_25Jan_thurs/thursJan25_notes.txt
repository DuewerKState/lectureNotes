HW 1 can be turned in today for 10% off

HW 2 due Tuesday, January 31


/////////////////////////

- where to find examples from class

- how to clone lecture notes repo

////////////////////////////////

Today:

- truth tables
- order of operations
- logic gates and circuits
- parse trees
- satisfiability
- logical equivalence

///////////////////////////////

Start truth tables and logic gates.

    have boolean variables
    want to express statements like: p AND (q OR r)

Variables can be true or false

Basic operations:

∧ - and (can use a caret ^ )
∨ - or (inclusive or) (can use a capital V)
¬ - not (can use ! or ~ instead)
→ - implies (can use ->)


Basic logic gates (draw on board)

///////////////////////////////////////////////////

Fill in basic operations:


AND:

p q | p ∧ q
------------
T T |   T
T F |   F
F T |   F
F F |   F


OR:

p q | p ∨ q
------------
T T |   T
T F |   T
F T |   T
F F |   F


NOT:

p | ¬p
-------
T |  F
F |  T

////////////////////////////////////////////////

IMPLIES operator →

"If I have a test, then I will study"

p: I have a test
q: I will study

p → q

It is false if we have BROKEN A PROMISE.
Otherwise it is true.

p q | p → q
------------
T T |   T   The promise was kept.
T F |   F   The promise was broken.
F T |   T   The first 'false' doesn't tell us anything about the second statement.
F F |   T   The first 'false' doesn't tell us anything about the second statement.

How does the implies operator relate to programming?

//////////////////////////////////////////

Design circuit for:

¬(p ∨ q)       (p NOR q) (using just AND, OR, NOT gates)
                exclusive or

                should be true when exactly one input is true
                otherwise false

(p OR q) AND NOT(p AND q)
/////////////////////////////////////

How would we evaluate the output of this circuit with
different inputs?

/////////////////////////////////////

--> how to add an image to GitHub repo?

/////////////////////////////////////

Compound truth tables.


Consider ¬p ∧ q ∨ r.

--> what operation do we do first?

From highest (happens first) to lowest (happens last) precedence:
    (), ¬, ∧, ∨, →




Given this statement:

    ((¬p) ∧ (q ∨ r))

Add () to show the order of operations.


Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F

 ((¬p) ∧ (q ∨ r))

 F V (F)

F

////////////////////////////////////////////////

(4 - 1) - 2
Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to....    (¬(¬p))

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to....  ((p ∧ q) ∧ r)
        p ∨ q ∨ r is equivalent to....  (p v q) v r

    → evaluates right to left
        p → q → r is equivalent to....  p → (q → r)





//////////////////////////////////////////

Top-level operator (what happens LAST?)




p ∧ q ∨ r ∧ p

rewrite with ():

(p ∧ q) ∨ (r ∧ p)

top-level operator?

^

How is this similar to a circuit?


///////////////////////////////

Classifying truth tables.

Contingent, contradictory, tautology


Definitions/examples

contingent - the overall statements is true for
    some truth assignments and false for others

Example?    p ^ q



contradictory - for all possible truth assignments,
    the overall statement is false

Example?    p ^ !p



tautology - for all possible truth assignments,
    the overall statement is true

Example?    p v !p


////////////////////////////////////////

Write a truth table for:

p ∨ q → p

            *
----------------
p q | p ∨ q → p
----------------
T T |   T     T
T F |   T     T
F T |   T     F
F F |   F     T
----------------


--> how would we mark the top-level operator?
The 'OR' (v) operator. You would read the table as (p v q) -> p
--> how would we classify this truth table?
Contingent; mostly true for all true statements.

/////////////////////////////////////////

complete truth table in truth.logika

////////////////////////////////////////

Satisfiability.

- definition: a statement is satisfiable if there is at least
one truth assignment that makes the statement true


- what kind of statement is satisfiable? what kind is not?
    satisfiable: contingent, tautology
    not satisfiable: contradictory

- is this satisfiable? How would we show it?

        (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)

        Need ONE truth assignment that makes it true.

        p: T
        q: T
        r: T

--> how would we show something was NOT satisfiable?

        Would need full truth table and show statement is contradictory.

/////////////////////////////////////////

Logical equivalence.

!(p ^ q)

!p v !q

DeMorgan's Law

--> how to show two statements ARE equivalent?

Truth tables.

For every truth statement, both statements have the same output.

--> how to show two statements are NOT equivalent?

Just need ONE truth statement from a truth table that is different from the same truth statement of another truth table.

////////////////////////////////////////

Parse trees

--> what are they?

Think of AVL trees. It has a similar concept.

--> draw one for (p ∧ q) → ¬r

Operators are at the top, variables are at the bottom.
When drawing, place lowest-precedence operators higher in the tree and highest-precedence operators lower in the tree.

--> how do they relate to programming?

--> what is the "top-level operator" here?

////////////////////////////////////////

Next time:

- DeMorgan's laws
- Equivalent statements
- Propositional logic translations

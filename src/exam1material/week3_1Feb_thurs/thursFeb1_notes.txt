HW 3 due Tuesday, February 6

    Reminder: correct submission format

    repo/tree/digital fingerprint

    starting on HW 3, there will be a 5 pt deduction for
    submissions in the wrong format

Exam 1 is Thursday, February 8
    take full time
    closed notes
    similar to HW problems
    will post practice exam
    will review on Tuesday

//////////////////////////////

Today:
- Natural deduction rules for AND/OR operators
- Using natural deduction to prove two statements are equivalent
- If time, start rules for implies operator

//////////////////////////////

Want to prove a conclusion logically follows from
a set of premises.

...could use truth tables

Downside?





////////////////////////////

New idea: demonstrate conclusion follows from premises using
*natural deduction*

--> use a minimal set of deduction rules

--> for each logical operator
    - *introduction* rule:
        lets us introduce a claim with that operator

    - *elimination* rule:
        lets us extract pieces from a claim with that operator

--> apply these rules to create new claims that logically follow



/////////////////////////////////

Want to prove a *sequent* of the form:

    premises ⊢ conclusion

where *premises* is a comma-separated list.


|- (alternative to inserting ⊢)


--> we will show the conclusion logically follows the premises using
a series of natural deduction rules


////////////////////////////

AND rules idea.

1) What if we wanted to INTRODUCE an AND operator, like:
      P ∧ Q


   --> in what situations do you think we could do that?





2) What if we already had an AND statement like  P ∧ Q.

    --> what new claims would make sense using that statement?



    --> what happened to the AND operator in both cases?



//////////////////////////

AND rule summaries.


AND introduction:

        P   Q
∧i :  ---------
        P ∧ Q



--> How could we demonstrate this rule in a truth table?




///

AND elimination:

        P ∧ Q              P ∧ Q
 ∧e1 : ---------    ∧e2 : ---------
          P                  Q



--> How could we demonstrate these rules in a truth table?



//////////////////////////////////

What if we knew:

    a ∨ ¬b

and also:

    c → d

What could we claim with  ∧i?



//////////////////////////////////

Natural deduction proof syntax.


    premises ⊢ conclusion
    {
        1. claim                justification
        2. claim                justification
        ...
        n. conclusion           justification
    }



claim: a propositional logic statement
justificaton: the rule justifying the corresponding claim
    (along with line numbers as needed to reference previous claims)



/////////////////////////////////

Justifications so far:

    premise

    ∧i lhsNum rhsNum

    ∧e1 andNum

    ∧e2 andNum


////////////////////////////////

Example:

Given premises:  a ∧ b, c
Use natural deduction to prove: b ∧ c




/////////////////////////////////

Use Logika to check our work (and1.logika)

/////////////////////////////////

Prove the following sequent (and2.logika)

p, q, r ⊢ r ∧ (q ∧ p)



////////////////////////////////

Prove the following sequent (and3.logika)

p ∧ q ∧ r ⊢ q


////////////////////////////////

Prove that ∧ is commutative:



////////////////////////////////


OR introduction

          P                      Q
 ∨i1 : ---------        ∨i2 : ---------
        P ∨ Q                   P ∨ Q


Why does this make sense from truth tables?



Syntax:

 ∨i1 lineWithLeft
 ∨i2 lineWithRight

///////////////////////////////////////////

Example:

p ∧ q ⊢ p ∨ q
{
    1. p ∧ q            premise
    2. q                ∧e2 1
    3. p ∨ q            ∨i2 2
}

Or, could have done:

p ∧ q ⊢ p ∨ q
{
    1. p ∧ q            premise

}


///////////////////////////////////////////

OR elimination


Idea:
- If an OR statement is true, what do we know?




- What if we can reach the same conclusion no matter which side
    of the OR is true?


Rule summary:


      P ∨ Q   {P assume    {Q assume
                ... R}       ... R}
∨e : ---------------------------------
                    R



How does this relate to programming?






if (condition) {
    some result
}
else {
    some result
}

--> what do we know is true here?


///////////////////////////////

Syntax for using ∨e:

a. P ∨ Q            (some justification)
b. {
    P               assume
    ...
    R               (some justification)
}
c. {
    Q               assume
    ...
    R               (some justification)
}
d. R                ∨e a b c


////////////////////////////////

Example: prove that OR is commutative (or1.logika)


////////////////////////////////

Do you think we could prove:

p ∨ q ⊢ p ∧ q



////////////////////////////////

Proving equivalence.

--> how do we prove two statements are equal in truth tables?

    e.g., DeMorgan's laws:
    ¬(p ∨ q) is equivalent to ¬p ∧ ¬q




--> how do we do it with proofs?




////////////////////////////////

Example: prove one of the distributive laws

p ∨ (q ∧ r)     is equivalent to       (p ∨ q) ∧ (p ∨ r)


(orDist.logika)


////////////////////////////////

Equivalence in if-statements.

Consider this if-statement:

if (grade >= 80 || extraCredit == true) {
    if (grade <= 90 || extraCredit == true) {
        //do stuff
    }
}

--> translate to propositional logic

p: grade >= 80
q: extraCredit == true
r: grade <= 90

Express conditions in proposition logic:



Equivalent to:


--> what is an equivalent, simpler if-statement?



///////////////////////////////////

Next set of deduction rules: implies operator

/////////////////////////////////////

Implies-elimination, →e

      P, P → Q
→e: -----------
        Q



English example:

If it is hot, then I will go swimming.
It is hot.

Conclusion?


--> how would this look in a truth table?
    (what is always the case when P and P → Q are both true?)


///////////////////////////////////////

Syntax for using →e:

a. P                (some justification)
b. P → Q            (some justification)
c. Q                →e b a



////////////////////////////////////////

Example (implies1.logika):

(p ∧ q) → r,  p → q,  p  ⊢ r



Example (implies2.logika):

p → r,  q → r,  p ∨ q  ⊢ r

////////////////////////////////////////

Next time:
- more with implies operator in natural deduction
- review for Exam 1
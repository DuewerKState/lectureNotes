
import org.sireum.logika._

//adult tickets: $50
//kid tickets: $30
def getTicketCosts(adult: Z, kid: Z): Z = {
    //function contract
    l"""{
        //what should we require about the parameters?
        requires adult >=0 ^ kid >= 0

        //what kind of result should we promise to return?
        ensures result >= 0
            result == adult*50 + kid*30
    }"""

    //Step 2: list preconditions as premises
    l"""{
        1. adult >=0 ^ kid >= 0     premise //precondition is true
    }"""

    //get the total ticket cost
    val overall: Z = adult*50 + kid*30

    //Step 3: prove we have satisfied the postconditions
    l"""{
        //need: overall >= 0
        //need: overall == adult*50 + kid*30

        1. adult >=0 ^ kid >= 0         premise //still true here
        2. overall == adult*50 + kid*30 premise //from assignment
        3. adult >= 0                   ^e1 1
        4. kid >=0                      ^e2 1
        5. overall >= 0                 algebra 2 3 4
    }"""

    return overall
}

////////////// Test code /////////////////

val k: Z = 3
val a: Z = 2

// Step 1 - prove the precondition before calling the function

l"""{
    1. k == 3           premise //from assignment
    2. a == 2           premise //from assignment
    3. a >= 0           algebra 2 //satisfies 1st precondition
    4. k >= 0           algebra 1 //satisfies 2nd precondition
    5. a >= 0 ^ k >= 0  ^i 3 4 //satisfies the ^ in the precondition
}"""

val cost: Z = getTicketCosts(a, k)

//step 4: use postconditions to prove your asserts

l"""{
    1. cost >= 0                premise   //first postcondition
    2. cost == a*50 + k*30      premise //second postcondition
    3. k == 3                   premise //from previous block
    4. a == 2                   premise //from previous block
    5. cost == 190              algebra 2 3 4 //for last assert
}"""

//what *should* cost be?
assert(cost >= 0)
assert(cost == 190)

// This was our code for absolute value
// modify it to be in a function

import org.sireum.logika._

def absVal(numOrig: Z) : Z = {
    //what do we need here?

    l"""{
        //no requirement
        ensures result >= 0
            result == numOrig V result == -numOrig
    }"""

    var num: Z = numOrig

    //update num to be the absolute value of the input
    if (num < 0) {
        num = num * -1

        l"""{
            1. num_old < 0              premise //if condition true
            2. num == num_old * -1      premise //assignment
            3. num_old == numOrig       premise //from previous assignment
            4. num >= 0                 algebra 1 2
            5. num == -numOrig          algebra 3 2
        }"""

    } else {

        //do nothing -- num is already its own absolute value

        l"""{
            1. !(num < 0)           premise //condition is false
            2. num >= 0             algebra 1
            3. num == numOrig       premise //hasn't changed
        }"""
    }

    //these were our old asserts
    //assert(num >= 0)
    //assert(num == numOrig | num == -numOrig)

    //before we return, prove the postconditions
    //result == numOrig V result == -numOrig

    l"""{
        1. num >= 0     premise //true in both branches, for postcondition
        2. num == -numOrig V num == numOrig premise //LHS from if, RHS from else

        3. {
            4. num == -numOrig          assume
            5. num == numOrig V num == -numOrig     Vi2 4
        }
        6. {
            7. num == numOrig           assume
            8. num == numOrig V num == -numOrig     Vi1 7
        }
        9. num == numOrig V num == -numOrig         Ve 2 3 6
    }"""

    //what do we return?
    return num
}

////////////////// Test code //////////////

val x: Z = -4

//no precondition - don't need anything here

val answer: Z = absVal(x)

l"""{
    1. answer == x V answer == -x   premise //from postcondition
    2. answer >= 0                    premise //from postconidtion
    3. x == -4                      premise
    4. {
        5. answer == x              assume
        6. answer == -4             algebra 3 5
        7. !(answer >= 0)           algebra 6
        8. _|_                      algebra 2 6
        9. answer == 4              _|_e 8
    }
    10. {
        11. answer == -x            assume
        12. answer == 4             algebra 3 11
    }
    13. answer == 4                 Ve 1 4 10
}"""

assert(answer == 4)

//use function to get absolute value of x
//what *should* the absolute value be?
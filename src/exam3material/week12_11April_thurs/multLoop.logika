import org.sireum.logika._

//finding x*y by doing x + x + x + ... + x (y times)
def mult(x: Z, y: Z): Z = {
    l"""{
        requires y >= 0
        ensures result == x*y
    }"""

    var total: Z = 0
    var i: Z = 0

    //Step 1: prove invariant before loop begins
    l"""{
        1. total == 0           premise
        2. i == 0               premise
        3. total == i*x         algebra 1 2 //proves invariant 1
        4. y >= 0               premise //from precondition
        5. i <= y               algebra 2 4 //proves invariant 2
        //need: total == i*x
    }"""

    while (i < y) {
        //what should the loop invariant be?
        l"""{
            invariant total == i * x
                i <= y
            modifies i, total
        }"""

        //assume loop invariant holds here (premise)

        total = total + x

        l"""{
            1. total == total_old + x   premise //from assignment
            2. total_old == i * x       premise //from invariant
            3. total == i*x + x         algebra 1 2
        }"""

        i = i + 1

        //Step 2: need to prove that invariant still holds

        l"""{
            1. i == i_old + 1           premise //from assignment
            2. total == i_old*x + x     premise //from previous block
            3. i_old == i-1             algebra 1
            4. total == (i-1)*x + x     algebra 2 3
            5. total == i*x - x + x     algebra 4
            6. total == i * x           algebra 5 //proves invariant
                                                //still holds
            7. i_old <= y               premise //from second invariant
            8. i_old < y                premise //from loop condition
            9. i <= y                   algebra 1 8 //proves second invariant
        }"""
    }

    //<-- want to be sure that invariant is true here
    //prove postcondition, total == x*y

    l"""{
        1. !(i < y)                premise //loop condition is false
        2. i >= y                   algebra 1
        3. i <= y                   premise //second invariant
        4. i == y                   algebra 2 3
        5. total == i * x           premise //loop invariant holds
        6. total == x*y             algebra 4 5 //proves postcondition
    }"""

    return total
}

//////////// test code /////////

val a: Z = 5
val b: Z = 4

//Step 1: prove the precondition

l"""{
    1. b == 4               premise
    2. b >= 0               algebra 1 //proves precondition
}"""

var ans: Z = mult(a, b)

l"""{
    1. ans == a*b           premise //from postcondition
    2. a == 5               premise
    3. b == 4               premise
    4. ans == 20            algebra 1 2 3
}"""

//what do we want to assert that it is?
assert(ans == 20)
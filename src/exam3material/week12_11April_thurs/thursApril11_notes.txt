HW 10 due Tuesday, April 16

Exam 3 is Thursday, April 18

////////////////////////

Today:
- verifying recursive functions
- loop invariants
- verifying loops
- Logika facts (a form of recursive definition)

////////////////////////

Reminder:

- What is a function contract?
    precondition (requires)
    postcondition (ensures)


- What does "requires" mean?
    requirements that the function has in order to work correctly
    and in order to satisfy its postcondition


- What does "ensures" mean?
    things the function is promising will happen as a result
    of calling it



- What can the function do with the precondition?
    list precondition as a premise


- What must the function do with the postcondition?
    prove the postcondition just before returning


- What must the calling code do with the precondition?
    must prove the precondition before a function call


- What can the calling code do with the postcondition?

    function(something)
    <--- I can list the function's postcondition as a premise here


/////////////////////////


Example (mult_recursive.logika):

- multiplication through repeated (recursive) addition
- write function contract
- do verification

/////////////////////////////

Validating loops.

while (condition) {
    statements
}

<-- number of iterations: 0 or infinity

We want to be able to make claims about our program after loop
is done


    ...why is this more challenging than an if-statement?



//////////////////////////////

Solution: kind of like mathematical induction

Come up with a loop INVARIANT that summarizes the behavior
in a loop

- invariant should be true before loop begins
- should be STILL true at the end of each iteration


Steps to proving correctness of a loop:
----------------------------------------

1) Prove the invariant is true before the loop begins

    (what is this like in mathematical induction?)
    base case


2) Assume the invariant is true at the beginning of an iteration.
    Prove the invariant still holds at the end of the iteration.

    (what is this like in mathematical induction?)
    inductive step

/////////////////////////

When loop ends, you know two things:
    1) About the invariant?
        true


    2) About the loop condition?
        false


If your loop is in a function, you can use those two pieces
to prove the postcondition of the function.

(And if you can't, you need to make your invariant stronger.)

/////////////////////////

Loop invariant block: just inside the loop


//prove invariants here
while (condition) {
    l"""{
        invariant (list the invariant[s])
        modifies (list all variables modified in the loop)
    }"""

    //use invariants as a premise

    code for the loop

    //prove the invariants still hold
}


/////////////////////////

Example: see code for multiplication with repeated addition
    using a loop (mult_loop.logika)

--> can we use the function contract from recursive implementation?

    l"""{
        requires y >= 0
        ensures result == x*y
    }"""

--> should the test cases/asserts be different?

--> what if the loop condition was "i < y" instead?



///////////////////////

See our factorial function
(factorial_loop.logika)

--> How would we write the function contract?
--> How would we specify what we are trying to return?




/////////////////////////////////

Answer: Logika facts

- allow us to create our own proof rules
- similar to a recursive definition


Recursive definition of factorial:

factDef(1) = 1          //base case, 1! = 1
factDef(n) = n*factDef(n-1) , if n > 1  //recursive step
                                        //n! = n*(n-1)!



Here is the equivalent Logika fact for this definition:

l"""{
    fact
        def factDef(n: Z): Z
            fOne. factDef(1) == 1
            fBig.  ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x
}"""


Example: what is factDef(3)?

factDef(3) == factDef(2)*3
    factDef(2) == factDef(1)*2
        factDef(1) == 1




--> we can now use "factDef(n)" in our function contracts
    would mean n!

--> we can also do:

l"""{
    1. factDef(1) == 1                                  fact fOne
    2. ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x  fact fBig
}"""

/////////////////////////////////

<----- stopped here, will finish on Tuesday

/////////////////////////////////

Revisit factorial example.

--> Add Logika fact

--> Write function contract

--> Write loop invariant

--> Do verification


/////////////////////////////////////

Next time:
- more with loop invariants and function contracts
- review for exam 3

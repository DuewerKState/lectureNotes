import org.sireum.logika._

l"""{
    fact
        def factDef(n: Z): Z
            fOne. factDef(1) = 1
            fBig.  A x: Z  x > 1 -> factDef(x) = factDef(x - 1) * x
}"""

//want to return n!
//5! = 5 * 4 * 3 * 2 * 1
def factorial(n: Z): Z = {
    //function contract
    //what is result? result == n!
    //n* (n-1) * (n-2) * ..- * 2 * 1

    l"""{
        requires n >= 1
        ensures result = factDef(n)
    }"""

    var product: Z = 1
    var count: Z = 1

    //Step 1: prove invariant holds here
    //need: product == factDef(count)

    l"""{
        1. count == 1               premise
        2. product == 1             premise
        3. factDef(1) == 1          fact fOne
        4. product == factDef(count)    algebra 1 2 3 //proves 1st invariant
        5. count >= 1               algebra 1   //proves 2nd invariant
    }"""

    while (count != n) {
        l"""{
            invariant product = factDef(count) //product = count!
                count >= 1
            modifies count, product
        }"""
        count = count + 1

        l"""{
            1. count == count_old + 1           premise
            2. count_old != n                   premise //from loop condition
            3. n >= 1                           premise //precondition
            4. product == factDef(count_old)    premise //loop invariant
            5. product == factDef(count-1)      algebra 1 4
            6. count_old >= 1                   premise //from 2nd invariant
            7. count > 1                        algebra 1 6
        }"""

        product = product * count
        //Step 2: prove invariant still holds at end of iteration
        //invariant product == factDef(count)

        l"""{
            1. product == product_old*count     premise //assignment
            2. product_old == factDef(count-1)  premise //from previous block
            3. product == factDef(count-1)*count    algebra 1 2
            4. A x: Z  x > 1 -> factDef(x) = factDef(x - 1) * x fact fBig
            5. count > 1 -> factDef(count) = factDef(count - 1) * count Ae 4 count
            6. count > 1                premise //from previous block
            7. factDef(count) = factDef(count - 1) * count  ->e 5 6
            8. product == factDef(count)        algebra 3 7 //proves 1st invariant
            9. count >= 1                       algebra 6 //proves 2nd invariant
        }"""
    }

    //Step 3: prove the postcondition
    //need: product == factDef(n)

    l"""{
        1. product == factDef(count)        premise //1st invariant holds
        2. count >= 1                       premise //2nd invariant holds
        3. !(count != n)                    premise //loop condition false
        4. count == n                       algebra 3
        5. product == factDef(n)            algebra 1 4 //proves postcondition
    }"""

    return product
}

/////////// Test code //////////////////


val test: Z = 3


//prove precondition
l"""{
    1. test == 3                premise
    2. test >= 1                algebra 1 //for precondition
}"""

val answer: Z = factorial(test)

l"""{
    1. answer == factDef(test)      premise //from postcondition
    2. test == 3                    premise
    3. answer == factDef(3)         algebra 1 2
    4. ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x      fact fBig
    5. 3 > 1 → factDef(3) == factDef(3 - 1) * 3             Ae 4 3
    6. 3 > 1                        algebra
    7. factDef(3) == factDef(3 - 1) * 3                     ->e 5 6
    8. factDef(3) == factDef(2) * 3                         algebra 7
    9. 2 > 1 → factDef(2) == factDef(2 - 1) * 2             Ae 4 2
    10. 2 > 1           algebra
    11. factDef(2) == factDef(2 - 1) * 2                                ->e 9 10
    12. factDef(2) == factDef(1) * 2                algebra 11
    13. factDef(1) == 1                             fact fOne
    14. factDef(2) == 2                             algebra 12 13
    15. factDef(3) == 6                             algebra 8 14
    16. answer == 6                                 algebra 3 15
}"""

assert(answer == 6)
HW 10 due tonight

Exam 3 is Thursday, April 18
    (we'll review today)

Rachel is holding an exam 3 study session Wednesday, April 17
    12-2 pm

Final exam: Thursday, May 9 2:00-3:50

There will be one more HW assignment, posted next week

//////////////////////////////

Today:
- Revisit Logika facts and factorial example
- Exam 3 review

///////////////////////////////

Logika facts - write recursive definitions

factDef(1) == 1
factDef(n) == factDef(n-1)*n, n > 1

l"""{
    fact
        def factDef(n: Z): Z
            fOne. factDef(1) == 1
            fBig.  ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x
}"""


(why do we need to know how n and count compare to 1?)

l"""{
    1. factDef(1) == 1                                      fact fOne
    2. ∀x: Z  x > 1 → factDef(x) == factDef(x - 1) * x      fact fBig
}"""

--> look at factorial code. How do we come up with a function
    contract and loop invariant?

--> do factorial verification

//////////////////////////////////////

Exam 3:

- Covers everything since Exam 2, including HW 7-10
    review solutions if you haven't already -- esp. HW 7&8

- Closed notes, closed computers
- All open-ended problems
- NO verification using modulus or division
- NO verification using Logika facts


Topics:
- Predicate logic proofs with nested quantifiers
- Recursive definitions (functions, sets)
- Proof techniques, including:
    - Mathematical induction
    - Direct (conditional) proofs
        (know the "formal" definitions of even and odd)

    - Contrapositive proofs
        p->q

        Assume !q try to get !p

    - Proof by contradiction
        p->q assume p, assume for the sake of contradiction !q.
            After getting _|_, conclude q
        statement: assume for the sake of contradiction !statement.
            After getting _|_, conclude statement.

    - Proofs on sets
        A is a subset of set B
            Let x be an element in A. (write what this means)
            Show that x is an element in B by expressing x
                using B's notation

- Programming logic, including:
    - Assumes and asserts
    - The subst rules and the algebra rule
    - Verifying asserts in programs with variable assignments/
        expressions/updates
    - Verifying programs with if/else statements, functions,
        loops, and recursion
    - Function contracts (including the meaning of preconditions
        and postconditions)
    - Loop invariants
    - Verifying "test code" that calls a function


Work through practice exam.
HW 9 due Tuesday, April 9

////////////////////////////////

Today:
- Verifying the correctness of programs with:
    - variable mutation
    - modulo and division
    - conditional statements

////////////////////////////////

Finish swap.logika example

///////////////////////////////

Programs with division.


Recall: what is the only numerical type in our toy programs? int (Z)

--> what does that mean about division?

    7/4 is 1



--> what do you think we'll need to demonstrate before using division?

Make sure that the denominator isn't 0 (don't divide by zero).

//what should go here?

l"""{
    1. b != 0       justification
}"""

x = a / b

l"""{
    1. 2 != 0       algebra (don't need to specify the algebra for cases such as this)
}""
y = a / 2

--> consider this snippet:


val a: Z = num / 3
val b: Z = num*3

suppose num is 16, then a would be? 5

b would be? 48

l"""{
    1. a == num/3               premise
    2. a*3 == num               algebra 1           //is this true? //NO. a*3 = 15 and num is 16

    3. b == num*3               premise
    4. b/3 == num               algebra 3           //is this true? //YES. b is initialized to ba a multiple of 3, so this is fine.
}"""


/////////////////////////////

Programs with modulo.


To keep things easier to think about, modulo is only defined for:
    - nonnegative "numerators"
    - positive "denominators"

numerator % denominator


--> what does that mean we'll need to demonstrate before using modulo?

numerator >= 0
denominator > 0


//what should go here?


l"""{
    1. a >= 0       justification
    2. 2 > 0        algebra
}"""

x = a % 2



--> consider this snippet:

val test: Z = num/3

//maybe num is 16
//test = ?? 5

l"""{
    1. test == num/3                premise
    2. num == 3*test + num%3        algebra 1   //is this true? //YES. I am accounting for the remainder.
}"""

--> and this one:

l"""{
    1. x % 2 == 0                   (some justification)
    2. div = x / 2                  (some justification)
    3. 2*div == x                   algebra 1 2    //is this true? //YES. We've shown x is even.
}"""



////////////////////////////

Example (mod.logika):

- get positive, even input number

- add 1 to the number
    (assert that it is now odd)

- multiply the number by 2
    (assert that the number is now even)




/////////////////////////////

When working with multiplication and division...

Try to avoid using division in logic blocks if you can
help it. Try to express things with multiplication instead.

//////////////////////////////////

Verifying conditional statements.

For now, we'll just look at if/else statements:


if (condition) {

} else {
    //can put another if/else in here
}


/////////////////////////////////

(maxOfTwo.logika)

Example: max of two numbers

--> write our assert -- how do we know our program found the max?



...we still need to prove our assert


/////////////////////////////////

How to validate programs with conditionals.

if (C) {

} else {

}

assert(something)

/////////////////////////////////

l"""{
    1. P
}"""

if (C) {
    l"""{
        1. P            premise //why?
        2. C            premise //why?
    }"""

    claims

    l"""{
        1. Q            (some justification)
        2. A            (some justification)
    }"""

} else {
    l"""{
        1. P            premise //why?
        2. !(C)         premise //why?
    }"""

    claims

    l"""{
        1. Q            (some justification)
        2. B            (some justification)
    }"""
}

l"""{
    1. Q                premise //why?
    2. A V B            premise //why?
}"""

/////////////////////////////

Revisit the max example (maxOfTwo.logika)

- what claims can we make in BOTH branches?
- what claim will be different in the two branches?
- finish the validation

////////////////////////////////

(abs.logika)

Example: absolute value


////////////////////////////////

Verifying programs with nested conditionals

- same idea as non-nested
- include "summary" logic block after each inner if/else


///////////////////////////////

Max of 3 numbers

-- see code

-- in each branch, what do we know about max?

-- do verification

///////////////////////////////

Next time:
- verifying programs with functions
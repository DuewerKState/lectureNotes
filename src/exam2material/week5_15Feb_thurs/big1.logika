(c ∧ n) → t, h ∧ ¬s, h ∧ ¬(s ∨ c) → p ⊢ (n ∧ ¬t) → p
{
    1. (c ∧ n) → t              premise
    2. h ∧ ¬s                   premise
    3. h ∧ ¬(s ∨ c) → p         premise

    4. h                        ^e1 2
    5. !s                       ^e2 2
    6. { //Use -> to prove (n ∧ ¬t) → p
        7. n ^ !t               assume
        8. n                    ^e1 7
        9. !t                   ^e2 7
        10. { //Use !i to prove !(s V c)
            11. s V c           assume
            12. { //Use Ve to get _|_
                13. s           assume
                14. _|_         !e 13 5
                //Goal: _|_
            }
            15. { //The other side of OR
                16. c           assume
                17. c ^ n       ^i 16 8
                18. t           ->e 1 17
                19. _|_         !e 18 9
                //Goal: _|_
            }
            20. _|_             Ve 11 12 15
            //Goal: _|_
        }
        21. !(s V c)            !i 10
        22. h ^ !(s V c)        ^i 4 21
        23. p                   ->e 3 22
        //Goal: p
        //If I had h ^ !(s V c), could use -> e on #3 to get p
    }
    24. (n ∧ !t) → p            ->i 6
    //can we get h, !(s V c) from premise 3?
}
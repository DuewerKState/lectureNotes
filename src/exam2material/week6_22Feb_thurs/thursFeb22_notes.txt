HW 5 due Tuesday, February 27

////////////////////////////////////

Today:

- more with sets
- limitations of propositional logic
- begin predicate logic

///////////////////////////////////

Review:

Quantifiers - helps describe all or some elements in a set

    ∀ means... for all (universal quantifier)

    ∃ means... there exists (existential quantifier)



∀ x ∈ B  means... For all x in B

∃ x ∈ B  means... There exists x in B

//////////////////////////////////////

What do we know if A - B = A?

- Set difference
Start with A, remove everything that is also in B


What do we know if A - B = B - A?

A and B are both empty sets.

////////////////////////////////////////

Quick review:

A ⋃ B = {x : x ∈ A ⋁ x ∈ B}
    union
    set of all x such that x is in A or x is in B

A ⋂ B = {x : x ∈ A ⋀ x ∈ B}
    intersection
    set of all x such that x is in A and x is in B

A - B = {x : x ∈ A ⋀ x ∉ B}
    difference
    set of all x such that x is in A and x is not in B
//////////////////////////////////////

How to prove A ⊆ B?
   ∀ k (k ∈ A → k ∈ B)

    (What does this mean?)
    If an element is in A, then it is also in B
    All elements in A are also in B

--> How would we prove an implies statement with natural deduction?
    Assume LHS, try to get RHS

    Let x be an element in A. Prove that it is also in B.

--> How would we prove that A = B? A ⊆ B and B ⊆ A
    Let x be an element in A. We must show that it is also in B.
        ...

    Let y be an element in B. We must show that it is also in A.
        ...

///////////////////////////////////

Sketch proof of a distributive law on sets:

    and: intersection
    or: union

A ⋃ (B ⋂ C) = (A ⋃ B) ⋂ (A ⋃ C)
    Let x be an element in A ⋃ (B ⋂ C). We must show that x is an element in (A ⋃ B) ⋂ (A ⋃ C).

    Since x is in A ⋃ (B ⋂ C), we know that x is in A or x is in B ⋂ C.
    First, suppose x is in A. Then x is also in A ⋃ B and A ⋃ C.
    Since it is in both A ⋃ B and A ⋃ C, it is also in their intersection -- (A ⋃ B) ⋂ (A ⋃ C).

    Suppose instead that x is in B ⋂ C. This tells us that x is in B and x is in C.
    Since x is in B, it is also in A ⋃ B. Since x is in C, it is also in A ⋃ C.

    To finish the proof, ...

We must show that:
    A ⋃ (B ⋂ C) ⊆ (A ⋃ B) ⋂ (A ⋃ C)
and that
    (A ⋃ B) ⋂ (A ⋃ C) ⊆ A ⋃ (B ⋂ C).


//////////////////////////////////////

Another example of a proof about sets.

Example:

    A = {x : x = 4n, n ∈ ℤ} (x is in multiples of 4)
    B = {x : x = 2k, k ∈ ℤ} (x is in multiples of 2 or x is in even numbers)

Prove A ⊆ B.

Let x be an element in A. We must show that x is also in B.
Since x is in A, then x = 4n for some integer n.
We have x = 2(2n) = 2k where k is in the integer 2n.
This proves that x is in B.

Want: x = 2k for some integer k (would mean in B)

/////////////////////////////////

A = {x : x = 4n, n ∈ ℤ} (x is in multiples of 4)
--> What if B = {x : x = 2k-6, k ∈ ℤ}? Is A ⊆ B?

Let x be an element in A. We must show that x is also in B.
Since x is in A, x = n for some integer n. We have that:
    x = 4n
      = 2(2n + 3) - 6
      = 2k - 6

Where k is the integer 2n+3. This proves that x is in B.

Want: x = 2k - 6
        = 2(...) - 6


//////////////////////////////////////

A predicate is a boolean function that represents whether
    an individual has a particular property


Set builder notation: {x : P(x)}

where P(x) is a statement (a predicate) involving x




The set is all such x where P(x) is true

//////////////////////////////////////

Example:

A = {x : x ∈ ℕ ⋀ x^2 ≥ 25 }



P(x) = x ∈ ℕ ⋀ x^2 ≥ 25

P(2) = 2 ∈ ℕ ⋀ 2^2 ≥ 25 (this statement is false; 2^2 isn't ≥ 25)
P(-6) = -6 ∈ ℕ ⋀ (-6)^2 ≥ 25 (this statement is false; -6 is not a natural number)
P(10) = 10 ∈ ℕ ⋀ 10^2 ≥ 25 (this statement is true)

Is 2 in A? Is -6? Is 10?
Only 10 is in A.

//////////////////////////////////////

Limitations of propositional logic:

Premises:
All humans are mortal.
Socrates is human.

Conclusion
Therefore, Socrates is mortal.


How would we prove this in propositional logic?

What are the propositional atoms?

p: All humans are mortal
q: Socrates is a human
r: Socrates is mortal

p, q ⊢ r




///////////////

Predicate logic:

Instead of propositions, we will make claims about
individuals in a domain (a set)


These claims will involve predicates and quantifiers



//////////////////

More with predicates.

Example:

    Domain: {x : x is a student at K-State} (all students at K-State)
    C(x): whether x is in CIS 301

    Bob is taking: CIS 300, ECE 241, MATH 221, ENGL 200
    Jill is taking: CIS 301, MATH 510, HIST 251, MUSIC 170


    What is the value of C(Bob)? false

    What is the value of C(Jill)? true

    What is the value of C(Bob) ⋀ C(Jill)? false


////////////////

Quantifiers and predicates

Domain: {strawberry, blueberry, banana, orange, grapefruit, apple}

Berry(x): x is a berry
Citrus(x): x is a citrus fruit
Peel(x): x has a peel (that needs to be removed before eating)
Seeds(x): x contains inedible seeds
Bite(x): f is bite-sized

Write each statement in English. Is each one true or false?

Berry(strawberry) - true
Citrus(strawberry) - false
Peel(strawberry) - false
Seeds(strawberry) - false
Bite(strawberry) - true

∀ x (Berry(x))

    --> how could we express the same statement in our domain
    WITHOUT a quantifier?

All fruits in my domain are berries

false - bananas are not berries

{strawberry, blueberry, banana, orange, grapefruit, apple}

Berry(strawberry) ^ Berry(blueberry) ^ Berry(banana) ^ Berry(orange) ^ Berry(grapefruit) ^ Berry(apple)

///

∃ x (Citrus(x) ⋀ Seeds(x))

    --> how could we express the same statement in our domain
    WITHOUT a quantifier?

There is a fruit that is a citrus and has inedible seeds.

True - an orange is a citrus and has inedible seeds.

(Citrus(strawberry) ^ Seeds(strawberry)) V (Citrus(orange) ^ Seeds(orange)) V ... V ... V ... V ...

///

∀ x (Berry(x) ⋀ Bite(x))

All fruits are berries and are bite-sized.

False - oranges are not bite sized
        oranges are not berries

///

∀ x (Berry(x) → Bite(x))

All fruits that are berries are bite sized.

True - strawberries and blueberries are bite sized.

///

¬(∀ x Peel(x))

Can you think of another way to write the same thing?

!(Peel(strawberry) ^ Peel(blueberry) ^ ... ^ Peel(apple))

!Peel(strawberry) V !Peel(blueberry) V ... V !Peel(apple)   (Demorgan's Law of the original statement)

There is a fruit you cannot peel.
    ∃ x !Peel(x)

Not all fruits are peelable.


///

¬(∀ x (Seeds(x) → Citrus(x)))


Can you think of another way to write the same thing?

Not all fruits with seeds are citrus.
    True - an apple has inedible seeds and is not a citrus.

...

///

∀ x ¬Peel(x)



///

¬(∃ x Berry(x))


///

¬(∃ x (Peel(x) ⋀ Citrus(x)))


///

∃ x ¬(Peel(x) ⋀ Seeds(x))


///

∃ x (Citrus(x) → Berry(x))



/////////////////

For all: usually connect with ->

There exists: usually connect with ^


/////////////////

Predicates in math.

Can use boolean functions to represent properties in math, like this:

Domain: ℕ
Big(x): whether x > 100

∃ x Big(x)



But more commonly list the property itself, like this:

    ∃ x (x > 100)

Or, sometimes also list the domain in the statement:

    ∃ x ∈ ℕ : (x > 100)

///////////////////////////////

Domain: ℤ


What do these mean in English? Are they true?


∀ n ∃ m (n^2 < m)



∀ x ∃ y (x == y^2)




Write the following in predicate logic:
----------------------------------------

The sum of two negative integers is negative

Domain: ℤ




The difference of two positive integers is not necessarily positive







∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////

Writing specifications using predicate logic

Domain: {x : x is a user input number}




Want to specify: individual "min" is the minimum user input element



Want to specify that the array nums is sorted


Want to specify that every element in nums has been updated
    to be the absolute value of the original element

    (use "nums_in" to denote the original array, and "nums"
    to mean the final array)


//////////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////


Next time:
- Classifying predicate logic statements in a domain
    (tautology, contingent, contradictory)
- Determining if arguments in predicate logic are valid
- Equivalent statements in predicate logic
- Begin proofs in predicate logic
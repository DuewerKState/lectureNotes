HW 4 will be posted after class
    due Tues Feb 20


/////////////////

Exam 1 results


Go over problems (full solution will be posted after class)

////////////////

Today:
- review implies rules for natural deduction
- begin negation rules for natural deduction

//////////////////////////

Implies rules, review:


Implies-elimination, →e

      P, P → Q
→e: -----------
        Q



Syntax for using →e:

a. P                (some justification)
b. P → Q            (some justification)
c. Q                →e b a

////

Implies-introduction, →i

      {P assume
      ... Q}
→i: -----------
      P → Q



Syntax for using ->i:

a. {
    b. P            assume
    ...
    c. Q            (some justification)
}
d. P → Q            →i a


//////////////////////////

If you are trying to prove an implies statement, what should you
always do?


Review examples:

(implies1.logika)
p → r, q → r ⊢ p → (q → r)


(implies2.logika)
p → r, r → a ∨ b, a → q, b → t ⊢ p → q ∨ t


(implies3.logika)
p → (q → r) ⊢ (p → q) → (p → r)


//////////////////////////

Strategy for proving →


/////////////////////////

Negation rules in propositional logic (we'll start with two of them).

Not-elimination:

        P    ¬P
¬e:    ----------
          ⊥


⊥ (or _|_, underscore bar underscore) - bottom operator
means contradiction


Syntax:

a. p            (some justification)
b. ¬p           (some justification)
c. ⊥            ¬e a b


///


Not-introduction:

        {P assume
          ... ⊥ }
¬i:    -------------
           ¬P


Syntax:

a. {
    b. p            assume
    ...
    c. ⊥            (some justification, probably ¬e)
}
d. ¬p               ¬i a

///////////////////////////

Pattern: if you are trying to prove a NOT statement


Examples:

p → q, ¬q ⊢ ¬p
{
    1. p → q            premise
    2. ¬q               premise

}


p ⊢ ¬¬ p
{
    1. p            premise

}


//////////////////////////

Other examples in separate files:


(negation1.logika)
p → ¬q ⊢ ¬(p ∧ q)

///////////////////

(negation2.logika)
¬p ∧ ¬q ⊢ ¬(p ∨ q) (what is this? you'll prove the reverse on your HW)


(negation3.logika)
p → q ⊢ ¬q → ¬p (what is this?)

/////////////////////////

if (condition) {
    statement
}

What do we know if "condition" is true?
    statement

What do we know if "statement" is NOT true?




//////////////////////////

Next time:

- remaining negation rules
- applications to conditional statements
- natural deduction proof strategies
- soundness and completeness
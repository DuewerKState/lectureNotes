(p → q) → r, s → ¬p, t, (¬s ∧ t) → q ⊢ r
{
    1. (p → q) → r              premise
    2. s → ¬p                   premise
    3. t                        premise
    4. (¬s ∧ t) → q             premise

    //where does r come from?
    //Can we do anything with the premises? No
    //Any OR statements? No
    //Goal: Prove p -> q, if I had that could use ->e on #1 to get r

    5. { //pattern to use ->i to get p -> q
        6. p                    assume
        //Goal: q
        //If we had !s ^ t, could use ->e on #4 to get q
        //Already have t, just need !s
        7. { //Pattern to use !i to get !s
            8. s                assume
            9. !p               ->e 2 8
            10. _|_             !e 6 9
            //Goal: _|_
        }
        11. !s                  !i 7
        12. !s ^ t              ^i 11 3
        13. q                   ->e 4 12
    }
    14. p -> q                  ->i 5
    15. r                       ->e 1 14

    //Final Goal: r
}
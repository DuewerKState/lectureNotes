HW 6 due Tues March 5

Exam 2 will be Thurs March 7
    - more information will be posted by the end of the week
    - we'll spend some time reviewing on Tuesday

//////////////////////////////////////////////////

HW 5 comments:


4. {x : x ∈ ℤ, x ≥ -5} ∪ {x : x ∈ ℤ, x ≤ 7}

all integers




5. Suppose A ⋃ B = A for two sets A and B.
What does that tell us about A and B?

    B is empty
    A = B
    B is a subset of A


6. Suppose A ⋂ B = A for two sets A and B.
What does that tell us about A and B?

    A = B
    A is a subset of B



7 (a). If A ⋃ C = B ⋃ C, must A = B?
    not necessarily



7 (b). If A ⋂ C = B ⋂ C, must A = B?
    not necessarily



//////////////////////////////////////////////////

Today:

- More with for all introduction
- Deduction rules with the existential quantifier

//////////////////////////////////////////////////

Suppose we have these predicates in the domain of food:

P(x): x is a pizza
B(x): x is a burger
C(x): x has cheese

Given the premises:
    All food is pizza or burgers
    All pizza has cheese
    All burgers have cheese

We want to prove:
    All food has cheese

1) Translate each statement to predicate logic

Premises:
A x (P(x) V B(x))
A x (P(x) -> C(x))
A x (B(x) -> C(x))

Conclusion: A x C(x)

2) Prove the sequent (in the file allTrans.logika)

////////////////////////////////////////

Idea behind there exists-introduction (∃i):

        P(v)
∃i: --------------
       ∃ x P(x)

//v is some individual



If we know that: Human(Socrates)

Then we can conclude that: ∃ x (Human(x))



If we find ONE individual in a domain where a statement holds

...then THERE EXISTS an individual in the domain where the
    statement holds


//////////////////////////////////////////

Rule syntax:


Human(Socrates) |- ∃ x (Human(x))
{
    1. Human(Socrates)              premise
    2. ∃ x (Human(x))               ∃i 1 Socrates
}


/////////////////////////////////////////

Bigger example (exists1.logika):

∀ x (Human(x)->Mortal(x)), Human(Socrates) |- ∃ x (Mortal(x))



/////////////////////////////////////////


Idea behind there exists-elimination (∃e):

                { a P(a)    assume
     ∃ x P(x),    ... Q }
∃e: ------------------------------
                  Q

//think of a as an alias for the individual the ∃ statement held for
//a is "fresh" (never used before)


If we know there is at least one individual where some statement holds

...then we can introduce a (or whatever) as an ALIAS for that
    individual in a subproof

    ...whatever conclusion we reach in the subproof must be true
        overall, since a was an EXISTING individual



Structure of the subproof:

3. ∃ x P(x)
4. {
    5. a P(a)       assume //plug into your ∃ statement
    ...
    10. Q
}
11. Q               ∃e 3 4


--> Think of ∃e like OR-elimination
    ∃ x P(x) means: P(n1) V P(n2) V ... V P(nk)


**If you have an ∃ statement as a claim, it is a good strategy
to start with a block where you create an alias (e.g. a)
and plug it into your ∃ statement, as above

Use ∃e in the SAME situations you would use Ve

///////////////////////////////

Examples:

(exists2.logika)
∀ x (Human(x) → Mortal(x)), ∃ x (Human(x)) ⊢ ∃ x (Mortal(x))


(exists3.logika)
∃ x (P(x)) ⊢ ∃ y (P(y))

////////////////////////

(exists4.logika)
¬(∃ x (P(x) ^ Q(x))) ⊢ ∀ x (P(x) → ¬Q(x))

x is students

    P(x): student x attends K-State
    Q(x): student x attends KU

    --> what is this argument saying?

¬(∃ x (P(x) ^ Q(x))): there is no student who attends both
                        K-State and KU

 ∀ x (P(x) → ¬Q(x)): All students who attend K-State don't
                    attend KU

////////////////////////////

Proof tactics for predicate logic

- see if you can do anything right away with the premises
    - ^ elimination
    - ->, and the LHS, do ->e
    - ∀, individual, ∀e

- look at top-level operator for what you are trying to prove
    trying to prove ∀ x (P(x)) ?
        Ai, introduce random individual, try to prove P(random)

        {
            random

            goal: P(random)
        }
        A x P(x)            Ai

    trying to prove ∃ x (P(x)):
        see if you have a E x statement as a premise
            (then use Ee, create an alias for it, try to prove ∃ x (P(x)))
        see if you have an OR statement as a premise
            do Ve, see if you can show ∃ x (P(x)) in both cases
        no other ideas? try pbc
            {
                4. !(∃ x (P(x)))            assume

                //want: _|_
            }


    trying to prove -> subproof with ->i
            assume LHS, try to get RHS

            {
                LHS         assume

                //goal: RHS
            }
            LHS->RHS        ->i

    trying to prove ¬(something)
        use !i subproof

        {
            something           assume

            goal: _|_
        }
        !something              !i

    trying to prove an V
        can you get one side? use Vi

        do you have an OR statement already? do OR elim.

        do you have a E statement? do Ee

    trying to prove an ^
        try to prove both statements separately, then ^i

        no luck? try pbc

    when you are in a subproof?
        the goal IN THAT SUBPROOF


Unsure what to do?
    use OR elim if you have an OR
    use Ee if you have an E
    if all else fails, try pbc

/////////////////////////////////////////

Proving DeMorgan's laws

//demorgan1.logika
∀ x ¬P(x)       equivalent to       ¬(∃ x P(x))

/////////////////////////////////////

<-- stopped here, will finish on Tuesday

////////////////////////////////////

//demorgan2.logika
∃ x ¬P(x)       equivalent to       ¬(∀ x P(x))

////////////////////////////////////////

Next time:

- a bit more with predicate logic proofs
- review for exam 2